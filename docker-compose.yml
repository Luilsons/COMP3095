services:
  # Order Service
  order-service:
    image: order-service
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/orderdb
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    depends_on:
      - postgres
    networks:
      - spring

  # Product Service
  product-service:
    image: product-service
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: product-service
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring

  # Inventory Service
  inventory-service:
    image: inventory-service
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    container_name: inventory-service
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-inventory-db:5432/inventorydb
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    depends_on:
      - postgres-inventory-db
    networks:
      - spring

  # PostgreSQL for Order Service
  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - spring

  # PostgreSQL for Inventory Service
  postgres-inventory-db:
    image: postgres:latest
    container_name: postgres-inventory-db
    ports:
      - "5434:5434"
    environment:
      POSTGRES_DB: inventorydb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_inventory_data:/var/lib/postgresql/data
    networks:
      - spring

  # MongoDB for Product Service
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./data/mongo/products:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - spring

  # MongoDB Admin Interface
  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - "8086:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: mongodb
    depends_on:
      - mongodb
    networks:
      - spring

  # Kafka Zookeeper
  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: confluentinc/cp-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring

  # Kafka Broker
  broker:
    container_name: broker
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092, PLAINTEXT_HOST://host.docker.internal:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - spring

  # Kafka UI
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui
    ports:
      - "8088:8080"
    environment:
      KAFKA_CLUSTER_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERRS: broker:9092
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      - broker
    networks:
      - spring

  # Keycloak
  keycloak:
    container_name: keycloak
    hostname: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: ["start-dev", "--import-realm"]
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres-keycloak
      DB_DATABASE: keycloak
      DB_USER: admin
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      ROOT_LOGLEVEL: DEBUG
    ports:
      - "8090:8080"
    volumes:
      - ./realms:/opt/keycloak/data/import
    depends_on:
      - postgres-keycloak
    networks:
      - spring

  # PostgreSQL for Keycloak
  postgres-keycloak:
    image: postgres
    container_name: postgres-keycloak
    ports:
      - "5431:5432"
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - ./data/postgres/keycloak:/var/lib/postgresql/data
    networks:
      - spring

volumes:
  postgres_data:
    driver: local
  postgres_inventory_data:
    driver: local

networks:
  spring:
    driver: bridge
