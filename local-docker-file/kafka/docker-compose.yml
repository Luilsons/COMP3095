# docker-compose -f docker-compose.yml up -d
#
# docker-compose -f docker-compose.yml -p my_custom_project_name up -d
# For Example: docker-compose -f docker-compose.yml -p local up -d
#
# https://robert-askam.co.uk/posts/how-to-connect-mysql-workbench-to-running-mysql-inside-docker
# For docker to read and execute the mongo-init.js file, the database must NOT already exist.
# That is, the mongo-init.js file is only executed the one time, on newly initialized databases

version: '4.0'
services:
  # Zookeeper service to co-ordinate and manage Kafka brokers in a cluster
  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: confluentinc/cp-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring

# Kafka broker service for handling messaging and streaming  data between microservices.
  broker:
    container_name: broker
    image: confluentinc/cp-kafka:7.5.0
    ports:
      # External connections (outside docker) use 9092 and host.docker.internal (or the machine's external IP).
      - "9092:9092"
      # Internal connections (inside docker) and the container host name (broker).
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092, PLAINTEXT_HOST://host.docker.internal:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
        - zookeeper
    networks:
        - spring

# Kafka UI service for managing and monitoring Kafka topics, consumers, and brokers.
  kafka-ui:
      container_name: kafka-ui
      image: provectuslabs/kafka-ui
      ports:
        - "8086:8080"
      environment:
        KAFKA_CLUSTER_NAME: local
        KAFKA_CLUSTERS_BOOTSTRAPSERVERRS: broker:9092
        DYNAMIC_CONFIG_ENABLED: 'true'
      depends_on:
        - broker
      networks:
        - spring

networks:
  spring:
    driver: bridge










